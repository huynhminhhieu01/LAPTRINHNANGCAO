<!DOCTYPE html>
<html lang="vi">
<head>
  <%- include('../partials/head', { title: product ? product.name : 'Chi tiết sản phẩm' }) %>
  <style>
    /* Giữ nguyên các style cũ */
    .price-section { margin: 15px 0; }
    .original-price { text-decoration: line-through; color: #999; margin-right: 10px; }
    .discounted-price { font-size: 1.5rem; color: #d70018; font-weight: bold; }
    .product-image { max-height: 500px; object-fit: contain; }
    
    /* Thêm style cho loading */
    .btn-loading .spinner-border {
      width: 1rem;
      height: 1rem;
      border-width: 0.15em;
    }
  </style>
</head>
<body>


  <main class="container mt-4">
    <!-- Phần breadcrumb và chi tiết sản phẩm giữ nguyên -->
    <!-- ... -->

    <div class="mt-4">
      <form id="addToCartForm">
        <input type="hidden" name="productId" value="<%= product._id %>">
        <div class="mb-3">
          <label for="quantity" class="form-label">Số lượng:</label>
          <input type="number" id="quantity" name="quantity" class="form-control" value="1" min="1" max="10" style="width: 80px">
        </div>
        <button type="submit" class="btn btn-primary add-to-cart">
          <i class="bi bi-cart-plus"></i> Thêm vào giỏ hàng
        </button>
      </form>
    </div>

    <!-- Thêm container cho toast -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3"></div>
  </main>

 

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const addToCartForm = document.getElementById('addToCartForm');
      
      addToCartForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        
        // Hiển thị trạng thái loading
        submitBtn.disabled = true;
        submitBtn.classList.add('btn-loading');
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang xử lý...';
        
        try {
          const formData = new FormData(this);
          const productId = formData.get('productId');
          const quantity = parseInt(formData.get('quantity')) || 1;
          
          const response = await fetch('/add-to-cart', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId, quantity }),
            credentials: 'include'
          });
          
          const data = await response.json();
          
          if (data.success) {
            // Hiển thị thông báo thành công
            showSuccessToast('Đã thêm vào giỏ hàng', () => {
              // Chuyển hướng sang trang giỏ hàng sau khi toast ẩn đi
              window.location.href = '/cart';
            });
            
            // Cập nhật số lượng giỏ hàng trên header
            if (data.cartTotalQty) {
              updateCartCount(data.cartTotalQty);
            }
          } else {
            if (data.requireLogin) {
              window.location.href = `/login?returnUrl=${encodeURIComponent(window.location.pathname)}`;
            } else {
              showErrorToast(data.message || 'Lỗi khi thêm vào giỏ hàng');
            }
          }
        } catch (error) {
          console.error('Error:', error);
          showErrorToast('Lỗi kết nối đến server');
        } finally {
          // Khôi phục trạng thái ban đầu của nút
          submitBtn.disabled = false;
          submitBtn.classList.remove('btn-loading');
          submitBtn.innerHTML = originalText;
        }
      });
      
      // Hiển thị toast thành công và callback khi ẩn
      function showSuccessToast(message, callback) {
        const toastContainer = document.querySelector('.toast-container');
        const toastId = 'toast-' + Date.now();
        
        const toast = document.createElement('div');
        toast.className = 'toast show align-items-center text-white bg-success border-0';
        toast.role = 'alert';
        toast.id = toastId;
        toast.innerHTML = `
          <div class="d-flex">
            <div class="toast-body">
              <i class="bi bi-check-circle-fill me-2"></i> ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
        `;
        
        toastContainer.appendChild(toast);
        
        // Tự động ẩn sau 2 giây và chuyển hướng
        setTimeout(() => {
          toast.classList.remove('show');
          setTimeout(() => {
            toast.remove();
            if (callback) callback();
          }, 300);
        }, 2000);
      }
      
      // Hiển thị toast lỗi
      function showErrorToast(message) {
        const toastContainer = document.querySelector('.toast-container');
        const toastId = 'toast-' + Date.now();
        
        const toast = document.createElement('div');
        toast.className = 'toast show align-items-center text-white bg-danger border-0';
        toast.role = 'alert';
        toast.id = toastId;
        toast.innerHTML = `
          <div class="d-flex">
            <div class="toast-body">
              <i class="bi bi-exclamation-triangle-fill me-2"></i> ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
        `;
        
        toastContainer.appendChild(toast);
        
        // Tự động ẩn sau 3 giây
        setTimeout(() => {
          toast.classList.remove('show');
          setTimeout(() => toast.remove(), 300);
        }, 3000);
      }
      
      // Cập nhật số lượng giỏ hàng trên header
      function updateCartCount(count) {
        const cartCountElements = document.querySelectorAll('.cart-count');
        cartCountElements.forEach(el => {
          el.textContent = count;
          // Thêm hiệu ứng
          el.classList.add('animate__animated', 'animate__bounceIn');
          setTimeout(() => {
            el.classList.remove('animate__animated', 'animate__bounceIn');
          }, 1000);
        });
      }
    });
  </script>
</body>
</html>